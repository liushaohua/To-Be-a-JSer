## Closure、GC、Memory Leak

在了解闭包之前有几个概念需要了解:

* 词法作用域

简单地说,词法作用域就是定义在词法阶段的作用域。换句话说,词法作用域是由你在写 代码时将变量和块作用域写在哪里来决定的,因此当词法分析器处理代码时会保持作用域不变。


* 函数作用域

在ES5标准中,仅支持函数作用域,在任意代码片段外部添加包装函数,可以将内部的变量和函数定义“隐藏”起来,外部作用域无法访问包装函数内部的任何内容。

##### 下面看一些代码

```
function foo() {
    var a = 2;
    function bar() { 
        console.log( a );
     }
    return bar; 
}
var baz = foo();
baz(); // 2 —— 朋友,这就是闭包的效果。
```

这里很明显创建了闭包。

但是闭包到底是什么?

这大概是我看到的对闭包最好的解释!!!

闭包是对函数词法作用域的引用。

当函数在定义时的词法作用域以外的地方被调用。

闭包使得函数可以继续访问定义时的词法作用域。

**无论通过何种手段将内部函数传递到所在的词法作用域以外,它都会持有对原始定义作用 域的引用,无论在何处执行这个函数都会使用闭包。**

```
function foo() { 
    var a = 2;
    function baz() { 
        console.log( a ); // 2
    }
    bar( baz ); 
}
function bar(fn) {
    fn(); // 妈妈快看呀,这就是闭包!
}

var fn;
function foo() {
    var a = 2;
    function baz() { 
        console.log( a );
    }
    fn = baz; // 将 baz 分配给全局变量 
}
function bar() {
    fn(); // 妈妈快看呀,这就是闭包!
 }
     foo();
     bar(); // 2
```



##  Refer To

* Closure --->   你不知道的Javascript
